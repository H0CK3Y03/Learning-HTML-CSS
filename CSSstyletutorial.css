/* html{
    margin-top: -21px;  /* there already is a default margin, so to put some stuff closer together we need to add a negative margin*/
    /*margin-left: -8px;    
    color: white;
    background-image: url("images/cool.png");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    background-attachment: fixed;
    /*background: linear-gradient(to right,gray,black); /*there can be more than two colors, by default color flow starts from the top, con go top,left,right,bottom,bottomright,bottomleft,topright,topleft...*/
/*}

/*body{
    background-color: #000000;
    color: white;
}*/
/*h1{
    border: 1px solid #00FF00;
    /*background: linear-gradient(to bottom left, red,orange,yellow,green,blue,indigo,violet);
    color: #00FF00;
    font-family: 'Aldrich', sans-serif;
    border-bottom-style: dotted;
    border-top-style: dotted;
    border-left-style: solid;
    border-left-width: 10px;
    border-left-color:aqua;
    border-color: antiquewhite;*/
/*}

/*#backgroundText{
    background: linear-gradient(to right,grey,black);
    /*background-color: #111111;
    font-family: "Ink Free","MV Boli",sans-serif;
    font-style: italic;
    font-weight: bold;
    font-size: 18px;
    text-decoration: underline wavy rgb(8, 167, 241);
    color: #00AA00;
    padding: 5px;
    border-style: solid;
    border-style: dashed;
    border-style: dotted;
    border-style: double;
    border-style: ridge;
    border-style: groove;
    border-style: inset;
    border-style: outset;
    border-color: #06f3fc;
    border-radius: 10px;
    border-width: 10px 15px 10px 15px;
    border-top-left-radius: 50px;
    border-top: dashed;
    border-top-color: antiquewhite;*/
/*}
/*#headerID{
    border: 1px solid;
    width: 300px;
    margin-bottom: 0px;
}
p{
    border: 1px solid;
    width: 250px;
    padding: 25px;
    margin: 25px;
}
#p1{
    margin: 25px;
}
#p2{
    margin-top: 25px;
    margin-right: 75px;
    margin-bottom: 25px;
    margin-left: 75px;
    /*this is the same as above:*/
    /*margin: 25px 75px 25px 75px; /* margin: top right bottom left */
/*}
/*#p3{
   /* margin: 10%;  /* dynamically readjusts to the window*/
/*}
/*#p4{
    margin-left: auto; /*makes this element stick to the right. Other elements like the one above with a margin percentage may mess with the positioning*/
/*}
/*#p5{
    margin-right: auto ; /*sticks to the left*/
/*}
/*#p6{
    margin: auto; /* stays in the center, vertically centers the element*/
/*}
/*h1{
    color: white;
    background-color: black;
    border: 1px solid black;
    width: 200px;
    padding: 25px;

    text-shadow: 0px 0px 5px #00FF00, 0px -5px 5px red;

    box-shadow: 0px 0px 50px red;
}
/* pseudo-classes -> go after the element and a colon: element:pseudoclass*/
/*a:link{    /* all hyperlinks. This is the link pseudo-class */
/*    color:#78ffd0;
}
a:visited{   /* when we click a link it changes it's color to this. These are visited links*/
/*    color: #d359ff;
}
button:hover{   /* when we hover our mouse over the button*/
/*    background-color: #ff4529;
    color: white;
}
button:active{  /* when we click or hold the button*/
/*    background-color: #d13b24;
}

li:first-child{  /* applies to the first element in some list or grouping */
/*    background-color: #93ff7d;
}
li:last-child{  /* applies to the last element in some list or grouping, if a new item is added to the end then this changes to that item */
/*    background-color: #93ff7d;
}  
li:nth-child(5){  /* we can target a specific element in some list or grouping by putting the item number in the parenthesis */
/*    background-color: #93ff7d;
}
li:nth-child(odd){  /* we can target all odd items in the list / grouping */
/*    background-color: #93ff7d;
}
li:nth-child(even){
    background-color: #caffbf;
}
li:nth-child(3n+0){  /* we will be replacing the letters in the parenthesis with values */
    /*
    li:nth-child(an+b){}
    a = cycle size   (value dictates which items get configured -> every nth item)
    n = counter (starts at 0)
    b = offset value  (basically starts on a different number depending on the value)
    */

/*    background-image: linear-gradient(to right,#fff421,#ffffff);
    opacity: 0.5;
    border: 1px solid black;
}*/
/* p{
    border: 1px solid;
    width: 250px;
}
#p1{
    text-align: left;
}
#p2{
    text-align: center;
}
#p3{
    text-align: right;
} */
/*img{
    float: left;  /* the text can now go next to the image. the image floats to the left so the text is to the right. It readjusts if it is in a container */
    /* margin-right: 10px; */
/*}
div{
    border: 1px solid;
    width: 300px;
}
*/
/* h1{
    border: 1px solid;
    background-color: yellow;
    width: 200px; */

    /*position: fixed;  /* we fix this h1 element in place somewhere on our webpage, so based on the window*/
    /*position: relative;  /* this will position something relative to where it's normally positioned, so based on the element's position*/
    /*position: sticky;  /* the element will stick to the viewport when scrolling, so it doesn't dissapear offscreen. It will be covered by elements of the same type. useful for navigation bars*/
    /*position: static;  /* this is default positioning for elements*/
    /*position: absolute;  /* this will position the element based on the elements ancestors [a div element inside of a div element basically. The inner div element is the absolute, the outer is the relative]*/


    /*top: 0px;*/
    /*bottom: 0px;  /* from the bottom 0px -> it has a margin though so a negative number might be required*/
    /*right: 0px;  /* from the right 0px*/
/*}*/
/* #box1{  /* box1 is the ancestor to box2 */
    /*position: relative;
    background-color: lightgray;
    width: 200px;
    height: 200px;
    border: 1px solid;

    top: 100px; /* from top -> 100px*/
    /*left: 150px;*/
    /*margin-left: auto;
    margin-right: auto;
}
#box2{
    position: absolute; /* position is relative to it's positioned ancestor / if no ancestor -> then it's relative to viewport*/
    /*background-color: gray;
    width: 100px;
    height: 100px;
    border: 1px solid;

    top: 25%;
    left: 25%;
} */
/* p{
    width: 100px;
    background-color: red;
    font-size: 85px;
    text-align: center;
    margin: 0px;
}
#p1{

}
#p2{ */
    /*transform: translateX(50px);  /* will be transformed 50px on the x-axis. Negative transforms it to the left*/
    /*transform: translateY(50px);   /* will be transformed 50px on the y-axis. Negative transforms it to the top*/
    /*transform: translate(50px,50px);  /* will be transformed 50px on x and y axis*/
    /*transform: rotateX(180deg);  /* will rotate the element 180 degreed on the x-axis*/
    /*transform: rotateY(180deg);  /* will rotate the element 180 degreed on the y-axis*/
    /*transform: rotateZ();  /* will rotate the element 180 degreed on the z-axis*/
    /*transform: rotate();  /* basically the same as rotateZ */
    /*transform: scaleX(2);  /* doubles the size of the element on the x-axis. 0.5 will half it*/
    /*transform: scaleY(2);  /* doubles the size of the element on the y-axis. 0.5 will half it*/
    /*transform: scale(2,2);  /* doubles the size of the element on the x and y axis*/
    /*transform: skewY(45deg);  /* skews the element on the y-axis [makes it diagonal?]*/
    /*transform: skewY(45deg);  /* skews the element on the x-axis [makes it diagonal?]*/
    /*transform: skew(45deg,60deg);  /* skews the element on the x and y axis [makes it diagonal?]*/
    /* transform: matrix(0.5,1,1,0.5,50,50);  */
      /* -- the arguments in order: 
        scaleX(),  has to be bigger than 0
        skewY(),
        skewX(),
        scaleY(),  has to be bigger than 0
        translateX(),
        translateY(),*/
/*}*/
/* #p1{
    background-color: red;
    font-size: 85px;
    width: 100px;
    height: 100px;
    text-align: center;
    margin: 0px;
}
#p1:hover{
    animation: mySize, myColorAnimation, myRotateAnimation, myTranslate, myScale, myOpacity;   /* calls the animation */
/*    animation-duration: 5s;   /* how long to go from starting position to ending position */
/*    animation-iteration-count: infinite;   /* how many times does this animation go. (After it reaches end position it resets instantaneously to it's starting position)*//*}
/*    animation-play-state: paused;  /* default is running {plays the animation}, this pauses it */
/*    animation-delay: 1s;  /* default is 0s, add a delay to the animation */
/*    animation-timing-function: ease     /* default is linear - constant speed, ease-in - accelerates but doesn't slow down, ease-out - deccelerates but doesn't accelerate, ease - accelerates and then deccelearates*/
/*    animation: 3s linear 0s infinite running mySize; /* all above code in this one line. duration timing-function delay iteration-count play-state nameofanimation
/*@keyframes myColorAnimation{   /* this is the framework for the keyframe rule -> the rule allows us to make animations */
/*    /*from{background-color: red;}    /* starting position */
/*    /*to{background-color: blue;}   /* ending position */
/*    0%{background-color: red;}   /* multiple positions based on percentage {probably claculated from animation duration} */
/*    20%{background-color: orange;}
/*    40%{background-color: yellow;}
/*    60%{background-color: green;}
/*    80%{background-color: blue;}
/*    100%{background-color: purple;}
/*}
/*@keyframes myRotateAnimation{
/*    /*100%{transform: rotateZ(-360deg);}  /* negative numbers to make it go the other way */
/*    /*100%{transform: rotateX(360deg);}
/*    /*100%{transform: rotateY(360deg);}
/*    /* x,y,z -> think of it as looking at the top of a cube. Z goes towards you so it makes the element rotate left or right while facing you the whole way */
/*}
/*@keyframes myTranslate{
/*    50%{transform: translate(500px,100px);}  /* when it reaches 50% -> it will use the remaining % to return to OG position */
/*}
/*@keyframes myScale{
/*    50%{transform: scale(4,0.5);}
/*}
/*@keyframes myOpacity{
/*    0%{opacity: 0;}
/*    50%{opacity: 1;}   /* 1 is 100% visibility */
/*    100%{opacity: 0;}
/*}
/*@keyframes mySize{
/*    0%{font-size: 85px;}
/*    50%{font-size: 400px;}
/*    100%{font-size: 85px;}
/*} */
/* navigation bar */
/* ul{
    list-style-type: none;
    padding: 0px;
    margin: 0px;
    overflow: hidden;
    background-color: #444444;
}
li a{   /* we are targeting any a tag within a list item */
/*    float: left;
    display: block;
    color: white;
    padding: 10px 15px;
    text-align: center;
    text-decoration: none;
    border-right: 1px solid black;
    min-width: 60px;
}
li a:hover{
    background-color: #222222;

    animation: myGlowAnimation, myColorAnimation;
    animation-duration: 3s;animation-iteration-count: infinite;
}
@keyframes myGlowAnimation{
    50%{text-shadow: 0px 0px 10px yellow;}
}
@keyframes myColorAnimation{
    25%{color:orange;}
    50%{color: red;}
} */
/* .container{
    display: flex;
    flex-wrap: wrap;   /* makes items compress instead of moving to a new line when resizing window to be smaller if it's set to nowrap*/
/*    background-color: #444444;
 /*   height: 400px;

    /* flex-direction: column-reverse;  /* makes everything within be arranged into a column (last is first because of reverse so new things get added to the top)*/
    /* width: 110px; */
             /*----------  These change the x-axis  ----------*/
    /* justify-content: flex-start;  /* all items are place from left to right */
    /* justify-content: center;  /* centers all items dynamically*/
    /* justify-content: flex-end;  /* moves all items to the right */
    /* justify-content: space-around;  /* space appears when you expand the window, so the items are evenly spaced out */
             /*----------  These change the y-axis  ----------*/
    /* align-items: center;  /* when you have a big flexbox items start from the center on the y axis, default is flex-start */
    /* align-items: flex-start; /* default, starts at the top */
    /* align-items: flex-end;  /* starts at the bottom */
              /* ----------   These completly center the item on x and y axis ---------*/
/*    align-items: center;
 /*   justify-content: center;
}


.container div{    /* targets all div tags within the class of container */
/*    color:white;
/*    height: 100px;
/*    width: 100px;
/*    background-color: #999999;
/*    text-align: center;
/*    line-height: 100px;
/*    font-size: 50px;
/*    margin: 5px;
/*} */
.fa-youtube{
    color: red;
}
.fa-twitter{
    color: #1DA1F2;
}
a{
    text-decoration: none;
}